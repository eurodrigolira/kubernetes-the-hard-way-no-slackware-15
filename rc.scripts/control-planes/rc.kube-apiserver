#!/bin/sh
#
# kube-apiserver startup script for Slackware Linux
#
NAME=kube-apiserver
CMD=/usr/local/bin/${NAME}
LOG=/var/log/kube-apiserver.log
PID=$(pgrep --exact kube-apiserver)
STATUS=/proc/${PID}/status

# Check if kube-apiserver is present.
if [ ! -x ${CMD} ]; then
  echo "${NAME} not present or not executable."
  exit 1
fi

kubeapiserver_start() {
  if [ -e ${STATUS} ]; then
    echo "${NAME} already running."
  else
    echo "Starting ${NAME}..."
    nohup ${CMD} \
	    --advertise-address=10.20.30.61 \
	    --allow-privileged=true \
	    --authorization-mode=Node,RBAC \
	    --bind-address=0.0.0.0 \
	    --client-ca-file=/var/lib/kubernetes/ca.pem \
	    --enable-admission-plugins=NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \
	    --etcd-cafile=/var/lib/kubernetes/ca.pem \
	    --etcd-certfile=/var/lib/kubernetes/kubernetes.pem \
	    --etcd-keyfile=/var/lib/kubernetes/kubernetes-key.pem \
	    --etcd-servers=https://10.20.30.61:2379,https://10.20.30.62:2379,https://10.20.30.63:2379 \
	    --event-ttl=1h \
	    --encryption-provider-config=/var/lib/kubernetes/encryption-config.yaml \
	    --kubelet-certificate-authority=/var/lib/kubernetes/ca.pem \
	    --kubelet-client-certificate=/var/lib/kubernetes/kubernetes.pem \
	    --kubelet-client-key=/var/lib/kubernetes/kubernetes-key.pem \
	    --runtime-config='api/all=true' \
	    --service-account-key-file=/var/lib/kubernetes/service-account.pem \
	    --service-account-signing-key-file=/var/lib/kubernetes/service-account-key.pem \
	    --service-account-issuer=https://kubernetes.default.svc.cluster.local:6443 \
	    --service-cluster-ip-range=10.32.0.0/24 \
	    --service-node-port-range=30000-32767 \
	    --tls-cert-file=/var/lib/kubernetes/kubernetes.pem \
	    --tls-private-key-file=/var/lib/kubernetes/kubernetes-key.pem \
	    --v=2 \
	    >> ${LOG} 2>&1 &
  fi

}

kubeapiserver_stop() {
  if [ -e ${STATUS} ]; then
    echo "Stopping ${NAME}..."
    kill ${PID}
    while [ -e ${STATUS} ]; do
      sleep 1
      echo -n "."
    done
  fi 
}

kubeapiserver_restart() {
  kubeapiserver_stop
  sleep 1
  kubeapiserver_start
}	

kubeapiserver_status() {
  if [ -e ${STATUS} ]; then
    echo "Status of ${NAME}: running"
  else
    echo "Status of ${NAME}: stopped"
  fi
}

case "$1" in
  'start')
    kubeapiserver_start
    ;;
  'stop')
    kubeapiserver_stop
    ;;
  'restart')
    kubeapiserver_restart
    ;;
  'status')
    kubeapiserver_status
    ;;
  *)
    echo "Usage: $0 {start|stop|restart|status}"
esac

exit 0
